https://leetcode.com/problems/delete-the-middle-node-of-a-linked-list/description/

Example 1:
---------
Input: head = [1,3,4,7,1,2,6]
Output: [1,3,4,1,2,6]
Explanation:
The above figure represents the given linked list. The indices of the nodes are written below.
Since n = 7, node 3 with value 7 is the middle node, which is marked in red.
We return the new list after removing this node.

Example 2:
---------
Input: head = [1,2,3,4]
Output: [1,2,4]
Explanation:
The above figure represents the given linked list.
For n = 4, node 2 with value 3 is the middle node, which is marked in red.

Example 3:
---------
Input: head = [2,1]
Output: [2]
Explanation:
The above figure represents the given linked list.
For n = 2, node 1 with value 1 is the middle node, which is marked in red.
Node 0 with value 2 is the only node remaining after removing node 1.

Approch:
-------
step1 : Count karenga number of nodes ko
step2 : phr mid find karenga number of nodes ka
step3 : mid ka prev wala node find karenga by mid - 1
step4 : mid node delete kr denga

Code:
----
int countNode(ListNode* head){
        ListNode* curr = head;
        int count = 0;
        while(curr != NULL){
            count++;
            if(curr->next != NULL)
                curr=curr->next;
            else{
                break;
            }
        }

        return count;
    }
ListNode* deleteMiddle(ListNode* head) {
        
        if(head->next == NULL)
            return NULL;

        int count = countNode(head);
        int mid = count/2;
        int prev = mid - 1;
        ListNode* temp = head;

        while(prev != 0){
            temp = temp->next;
            prev--;
        }

        temp->next = temp->next->next;

        return head;
    }
